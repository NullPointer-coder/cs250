Homework 1215: Merge
Last modified: 8 December 2021

Due: 15 December, 1 pm

General Instructions
Shown below is a C program that performs a merge of two integer arrays. The input arrays are assumed to be sorted and in contiguous memory locations. The merge function overwrites the two separate arrays with a single sorted array that contains the combined values of both arrays. Duplicate values are allowed.

Your assignment is to implement this program in MIPS assembly language, exactly as written, with the following exceptions.

In the C program, the two input arrays are local variables in main, but in MIPS they can be global variables.
In the C program, the array result is allocated on the heap, but in MIPS it must be allocated on the stack. Therefore, instead of malloc and free, you set up the stack frame at the beginning of the function and then tear it down at the end.
In the C program, the number of elements in each array is calculated by using sizeof. Since MIPS doesnâ€™t have that operator, you need to use direct arithmetic on addresses to calculate the number of elements in each array.
In MIPS all non-character values are 4 bytes in size, so int, size_t, and unsigned are all the same size, 4 bytes.
The output of your MIPS program must be identical to the output of the C program. Make sure to follow the style rules.

/**
 * A program that implements two functions, merge and print_array,
 * and calls those two functions to show that they operate correctly
 * @author Jon Beck
 */

#include <stdio.h>
#include <stdlib.h>

/**
 * perform the merge of two arrays
 * input arrays must be in order
 * input arrays must be contiguous in memory, with
 * the first coming before the second
 * @param a the first array
 * @param a_length the number of elements in the first array
 * @param b the second array
 * @param b_length the number of elements in the second array
 */
void merge(int* a, size_t a_length, int* b, size_t b_length);

/**
 * print the contents of an array
 * @param a the array
 * @param a_length the number of elements in the array
 */
void print_array(int* a, size_t a_length);

int main(void)
{
  /* the two arrays are global in assembly */
  int array1[] = {1, 3, 4, 5, 8, 9};
  int array2[] = {2, 6, 7, 8};

  /* these two numbers are calculated without sizeof in assembly */
  size_t a1_length = sizeof(array1) / sizeof(int);
  size_t a2_length = sizeof(array2) / sizeof(int);

  print_array(array1, a1_length);
  print_array(array2, a2_length);

  merge(array1, a1_length, array2, a2_length);

  print_array(array1, a1_length + a2_length);
  return 0;
}

void merge(int* a, size_t a_length, int* b, size_t b_length)
{
  /* this array is allocated on the stack in assembly */
  int* result = (int*)malloc((a_length + b_length) * sizeof(int));

  size_t a_index = 0;
  size_t b_index = 0;
  size_t r_index = 0;

  while (a_index < a_length && b_index < b_length)
  {
    if (a[a_index] < b[b_index])
    {
      result[r_index] = a[a_index];
      a_index++;
    }
    else
    {
      result[r_index] = b[b_index];
      b_index++;
    }
    r_index++;
  }

  while (a_index < a_length)
  {
    result[r_index] = a[a_index];
    a_index++;
    r_index++;
  }

  while (b_index < b_length)
  {
    result[r_index] = b[b_index];
    b_index++;
    r_index++;
  }

  for (r_index = 0; r_index < a_length + b_length; r_index++)
  {
    a[r_index] = result[r_index];
  }

  print_array(result, a_length + b_length);

  /* in assembly, tear down stack instead */
  free(result);
}

void print_array(int* a, size_t a_length)
{
  size_t index;
  for (index = 0; index < a_length; index++)
  {
    printf("%d ", a[index]);
  }
  printf("\n");
}
By 1pm on Wednesday, 15 December, submit your assembly language program to the homework submission page. If you submit by noon on 13 December, I wil give you feedback before the final exam.